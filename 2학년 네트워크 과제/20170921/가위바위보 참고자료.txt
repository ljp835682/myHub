
#include <stdio.h>
#include <string.h>
#include <winsock2.h>



#define BUFSIZE 512
#define PLAYERCOUNT 2
#define NODATA -1

enum {NO_WIN, FIRST_WIN, SECOND_WIN=-1};

struct GameInfo
{
	int	gvalue;
	char  message[BUFSIZE];

};

struct _ClientInfo
{
	SOCKET sock;	
	SOCKADDR_IN clientaddr;
	GameInfo info;	
};

_ClientInfo* ClientInfo[PLAYERCOUNT];

int count=0;


int who_win(int part1, int part2);
void err_quit(char *msg);
void err_display(char *msg);
int recvn(SOCKET s, char *buf, int len, int flags);
_ClientInfo* AddClient(SOCKET sock, SOCKADDR_IN clientaddr);
void RemoveClient(_ClientInfo* ptr);


int main(int argc, char **argv)
{
	char No_win[]="비겼습니다.!!";
	char win[]="이겼습니다!!";
	char lose[]="졌습니다!!!!";
	char Intro[]="가위:0, 바위:1, 보:2 를 입력하세요:";


	// 윈속 초기화
	WSADATA wsa;
	if(WSAStartup(MAKEWORD(2,2), &wsa) != 0)
		return -1;

	// socket()
	SOCKET listen_sock = socket(AF_INET, SOCK_STREAM, 0);
	if(listen_sock == INVALID_SOCKET) err_quit("socket()");	

	// bind()
	SOCKADDR_IN serveraddr;
	ZeroMemory(&serveraddr, sizeof(serveraddr));
	serveraddr.sin_family = AF_INET;
	serveraddr.sin_port = htons(9000);
	serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
	int retval = bind(listen_sock, (SOCKADDR *)&serveraddr, sizeof(serveraddr));
	if(retval == SOCKET_ERROR) err_quit("bind()");

	// listen()
	retval = listen(listen_sock, SOMAXCONN);
	if(retval == SOCKET_ERROR) err_quit("listen()");

	// 데이터 통신에 사용할 변수		
	int addrlen;	
	SOCKET sock;
	SOCKADDR_IN clientaddr;

	while(1)
	{

		while(1)
		{
			addrlen = sizeof(clientaddr);
			sock = accept(listen_sock, (SOCKADDR *)&clientaddr, &addrlen);
			if(sock == INVALID_SOCKET)
			{
				err_display("accept()");
				continue;
			}

			_ClientInfo* ptr= AddClient(sock, clientaddr);	

			strcpy(ptr->info.message, Intro);

			if (send(ptr->sock, (char*)&(ptr->info), sizeof(GameInfo), 0) == SOCKET_ERROR)
			{
				err_display("IntroSend()");
				RemoveClient(ptr);
			}

			if(count==PLAYERCOUNT)
			{
				break;
			}
		}
		
		bool flag = false;

		for(int i=0; i<count; i++)
		{
			if (ClientInfo[i]->info.gvalue == NODATA)
			{
				if (recvn(ClientInfo[i]->sock, (char*)&ClientInfo[i]->info,
					sizeof(GameInfo), 0) == SOCKET_ERROR)
				{
					err_display("GameValue recv error()");
					RemoveClient(ClientInfo[i]);					
					flag = true;					
					i--;
				}

			}
			
		} 

		if (flag)
		{
			continue;
		}

		int result=who_win(ClientInfo[0]->info.gvalue, ClientInfo[1]->info.gvalue);

		if(result==NO_WIN)
		{
			strcpy(ClientInfo[0]->info.message, No_win);
			strcpy(ClientInfo[1]->info.message, No_win);			
		}
		else if(result==FIRST_WIN)
		{
			strcpy(ClientInfo[0]->info.message, win);
			strcpy(ClientInfo[1]->info.message, lose);
		}
		else
		{
			strcpy(ClientInfo[0]->info.message, lose);
			strcpy(ClientInfo[1]->info.message, win);
		}


		for(int i=0; i<count; i++)
		{

			if(send(ClientInfo[i]->sock, 
				   (char*)&ClientInfo[i]->info,
				    sizeof(GameInfo), 0)==SOCKET_ERROR)
			{
				err_display("Game result Message Send()");
			}	

			RemoveClient(ClientInfo[i]);
			i--;
		}
	}

	closesocket(listen_sock);

	WSACleanup();
	return 0;
}

void err_quit(char *msg)
{
	LPVOID lpMsgBuf;
	FormatMessage( 
		FORMAT_MESSAGE_ALLOCATE_BUFFER|
		FORMAT_MESSAGE_FROM_SYSTEM,
		NULL, WSAGetLastError(),
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		(LPTSTR)&lpMsgBuf, 0, NULL);
	MessageBox(NULL, (LPCTSTR)lpMsgBuf, msg, MB_ICONERROR);
	LocalFree(lpMsgBuf);
	exit(-1);
}

int recvn(SOCKET s, char *buf, int len, int flags)
{
	int received;
	char *ptr = buf;
	int left = len;

	while(left > 0){
		received = recv(s, ptr, left, flags);
		if(received == SOCKET_ERROR) 
			return SOCKET_ERROR;
		else if(received == 0) 
			break;
		left -= received;
		ptr += received;
	}

	return (len - left);
}

// 소켓 함수 오류 출력
void err_display(char *msg)
{
	LPVOID lpMsgBuf;
	FormatMessage( 
		FORMAT_MESSAGE_ALLOCATE_BUFFER|
		FORMAT_MESSAGE_FROM_SYSTEM,
		NULL, WSAGetLastError(),
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		(LPTSTR)&lpMsgBuf, 0, NULL);
	printf("[%s] %s", msg, (LPCTSTR)lpMsgBuf);
	LocalFree(lpMsgBuf);
}

int who_win(int part1, int part2)
{
	if( part1==part2)
		return NO_WIN;
	else if(part1%3 == (part2+1)%3)
		return FIRST_WIN;
	else
		return SECOND_WIN;
}

_ClientInfo* AddClient(SOCKET sock, SOCKADDR_IN clientaddr)
{
	_ClientInfo* ptr = new _ClientInfo;	
	ZeroMemory(ptr, sizeof(_ClientInfo));
	ptr->sock = sock;
	ptr->info.gvalue = NODATA;
	memcpy(&(ptr->clientaddr),  &clientaddr,   sizeof(clientaddr));	
	ClientInfo[count] = ptr;
	printf("\nClient 접속: IP 주소=%s, 포트 번호=%d\n",	inet_ntoa(clientaddr.sin_addr),
		ntohs(clientaddr.sin_port));
	count++;
	return ptr;
}

void RemoveClient(_ClientInfo* ptr)
{
	closesocket(ptr->sock);

	printf("\nClient 종료: IP 주소=%s, 포트 번호=%d\n",
		inet_ntoa(ptr->clientaddr.sin_addr),
		ntohs(ptr->clientaddr.sin_port));

	for (int i = 0; i < count; i++)
	{
		if (ClientInfo[i] == ptr)
		{
			delete ptr;
			int j;
			for (j = i; j < count - 1; j++)
			{
				ClientInfo[j] = ClientInfo[j+1];
			}	
			ClientInfo[j] = nullptr;
			break;
		}
	}

	count--;

}